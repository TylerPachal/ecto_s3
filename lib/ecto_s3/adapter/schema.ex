defmodule EctoS3.Adapter.Schema do
  @moduledoc false

  @behaviour Ecto.Adapter.Schema

  alias EctoS3.{ContentType, Path, UnsupportedOperationError}

  @impl true
  def autogenerate(:id), do: :erlang.unique_integer()
  def autogenerate(:binary_id), do: Ecto.UUID.generate()

  @impl true
  def insert_all(adapter_meta, _schema_meta, _header, _list, _on_conflict, _returning, _options) do
    %{repo: repo} = adapter_meta

    module = Module.split(repo) |> List.last()

    raise UnsupportedOperationError, message: """
      #{module}.insert_all/3 is not supported

      S3 has basic read, write, and delete operations, but no bulk write
      operation.  Because of this the #{module}.insert_all/2 function is not
      implemented and should be replaced by multiple calls to
      #{module}.insert/1:

        Enum.map(values, &#{module}.insert/1)
      """
  end

  @impl true
  def insert(adapter_meta, schema_meta, fields, on_conflict, returning, options) do
    %{bucket: bucket, format: format, repo: repo} = adapter_meta
    %{source: _source, prefix: _prefix, schema: schema_module} = schema_meta

    if Keyword.get(options, :returning) == true do
      raise ArgumentError, message: "S3 does not support :read_after_writes in schemas for non-autogenerated-primary keys.  The following fields in #{inspect(schema_module)} are tagged as such: #{inspect(returning)}"
    end

    module = Module.split(repo) |> List.last()

    check_stale_error_field!(options, "#{module}.insert/2")

    if on_conflict not in [{:raise, [], []}, {:nothing, [], []}] do
      raise UnsupportedOperationError, message: """
      Using an :on_conflict option with any
      value other than :nothing is not supported for #{module}.insert/2

      S3 has basic read, write, and delete operations, but no capabilty for
      conflict detection.  Because of this the #{module}.insert/2 function only
      allows the :nothing value.

        #{module}.insert(struct, on_conflict: :nothing)
      """
    end

    path = Path.absolute(schema_module, fields, format)
    payload = ContentType.encode(format, fields)
    header = ContentType.header(format)

    ExAws.S3.put_object(bucket, path, payload)
    |> ExAws.request!([header])

    {:ok, []}
  end

  @impl true
  def update(adapter_meta, schema_meta, _fields, _filters, _returning, _options) do
    %{repo: repo} = adapter_meta
    %{schema: schema} = schema_meta

    module = Module.split(repo) |> List.last()
    schema = Module.split(schema) |> List.last()

    raise UnsupportedOperationError, message: """
      #{module}.update/2 is not supported

      S3 only has basic read, write, and delete operations, there is no
      distinction between updating an existing file and writing a new file.
      Because of this the #{module}.update/2 function is not implemented and
      should be replaced by a combination of #{module}.get/2 and
      #{module}.insert/1:

        value = #{module}.get(#{schema}, id)
        updated_value = ...
        #{module}.insert(update_value)
      """
  end

  @impl true
  def delete(adapter_meta, schema_meta, filters, options) do
    %{bucket: bucket, format: format, repo: repo} = adapter_meta
    %{source: _source, prefix: _prefix, schema: schema_module} = schema_meta

    module = Module.split(repo) |> List.last()
    check_stale_error_field!(options, "#{module}.delete/2")

    path = Path.absolute(schema_module, filters, format)
    request = ExAws.S3.delete_object(bucket, path)

    # ExAws only ever returns 204s, regardless of if there was something to
    # delete or not.
    {:ok, %{status_code: 204}} = ExAws.request(request)
    {:ok, []}
  end

  def check_stale_error_field!(options, function_name) do
    if Keyword.get(options, :stale_error_field) do
      raise UnsupportedOperationError, message: """
      Using the :stale_error_field option is
      not supported for #{function_name}

      S3 has basic read, write, and delete operations, but no capabilty for
      conflict detection.  Because of this the #{function_name} function does
      not support the :stale_error_field option.
      """
    end
  end
end
